input {
  kafka {
    bootstrap_servers => "${KAF_HOSTS}"
    topics => ["topic"]
    group_id => "gr_id"
    decorate_events => true
    auto_offset_reset => "latest"
    consumer_threads => 3
    codec => avro_schema_registry {
        endpoint => "endpoint"
        schema_id => 107
    }
    value_deserializer_class => "org.apache.kafka.common.serialization.ByteArrayDeserializer"
    client_id => "cl_id"
  }
}

filter {
    json {
        source => "message"
        target => "target"
    }

    if "_jsonparsefailure" in [tags] {
        mutate {
            gsub => [
              "message", "[\'/\\]", "",
              "message", "\\\"", ""
            ]
        }
        json {
            source => "message"
        }
        mutate {
            remove_field =>  [ "message", "tags" ] 
        }    
    }

    # We should not send headers in message body, so put it into metadata and grab it from there during the actual sending
    mutate {
      add_field => {
        "[@metadata][headers][HEADER]"                    => "%{[headers][HEADER]}"
      }
    }

    # Transform message to standard position type
    if [Order][OrderType] == "OP_BUY" {
      mutate {
        add_field => {
          "[positionOpen][position][direction]" => "BUY"
        }
      }
    }

    if [Order][OrderType] != "OP_BUY" {
      mutate {
        add_field => {
          "[positionOpen][position][direction]" => "SELL"
        }
      }
    }

    if [Order][ClosePrice] and [Order][ClosePrice] != "" {
      mutate {
        add_field => {
          "[positionOpen][position][closeRate]" =>"%{[Order][ClosePrice]}"
        }
      }
    }

    mutate {
        gsub => [ "EventTimeStamp", " ", "T" ]
        gsub => [ "[MT5Deal][TimeMsc]", " ", "T" ]
        gsub => [ "[MT5Deal][Action]", "^.{0,5}", "" ]
      add_field => {
        "[positionOpen][operationType]"                 =>"%{[Order][OrderType]}"
        "[positionOpen][operationId]"                   =>"%{[Order][Ticket]}"
        "[positionOpen][dateTime]"                      =>"%{[Order][OpenTime]}"
        "[positionOpen][account][id]"                   =>"%{[Account][Login]}"
        "[positionOpen][position][instrument][symbol]"  =>"%{[Order][Symbol]}"
        "[positionOpen][position][instrument][numDigit]"=>"%{[Order][InstrumentDigits]}"
        "[positionOpen][position][id]"                  =>"%{[Order][Ticket]}"

        "[@metadata][headers][ENTITY_TYPE]" => "positionOpen"

        "[positionOpen][position][equity]" => 0
        "[positionOpen][position][asset]" => "USD"

      }
    }

    if [headers][ENTITY_STATUS] == "closed" {
      mutate {
        update => {
          "[@metadata][headers][ENTITY_TYPE]" => "positionClose"
        }
        rename => {
          "[positionOpen]" => "[positionClose]"
        }
      }
    }
    if [headers][ENTITY_STATUS] != "closed" and [headers][ENTITY_STATUS] != "opened" {
      mutate {
        update => {
          "[@metadata][headers][ENTITY_TYPE]" => "position"
        }
        rename => {
          "[positionOpen]" => "[position]"
        }
      }
    }

    # Remove all unnecessary fields
    mutate {
      remove_field =>  ["@version", "@timestamp", "headers", "Order", "Account", "EventTimeStamp" ]
    }
}

output {
    #stdout { codec => rubydebug { metadata => true } }
    stomp {
          host        => "${AMQ_HOST}"
          port        => "61613"
          destination => "/queue/${AMQ_QUEUE}"
          user        => "${STOMP_USER}"
          password    => "${STOMP_PASSWORD}"
          codec       => json
          headers     => {
            "HEADER"                    => "%{[@metadata][headers][HEADER]}"
          }
    }
}